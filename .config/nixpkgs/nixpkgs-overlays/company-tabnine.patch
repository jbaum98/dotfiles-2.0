diff --git a/company-tabnine.el b/company-tabnine.el
index 9cba5ee..0519546 100644
--- a/company-tabnine.el
+++ b/company-tabnine.el
@@ -89,7 +89,6 @@
 (defconst company-tabnine--buffer-name "*company-tabnine-log*")
 (defconst company-tabnine--hooks-alist nil)
 (defconst company-tabnine--protocol-version "0.11.1")
-(defconst company-tabnine--version-tempfile "~/TabNine/version")
 
 ;;
 ;; Macros
@@ -152,12 +151,6 @@ at the cost of less responsive completions."
   :group 'company-tabnine
   :type 'boolean)
 
-(defcustom company-tabnine-binaries-folder "~/TabNine"
-  "Path to TabNine binaries folder.
-`company-tabnine-install-binary' will use this directory."
-  :group 'company-tabnine
-  :type 'string)
-
 ;;
 ;; Faces
 ;;
@@ -193,109 +186,9 @@ Resets every time successful completion is returned.")
 ;; Global methods
 ;;
 
-(defun company-tabnine--error-no-binaries ()
-  "Signal error for when TabNine binary is not found."
-  (error "No TabNine binaries found.  Run M-x company-tabnine-install-binary to download binaries"))
-
-(defun company-tabnine--get-target ()
-  "Return TabNine's system configuration.  Used for finding the correct binary."
-  (let ((architecture
-         (cond
-          ((string= (s-left 6 system-configuration) "x86_64")
-           "x86_64")
-          (t
-           "i686")))
-
-        (os
-         (cond
-          ((or (eq system-type 'ms-dos)
-               (eq system-type 'windows-nt)
-               (eq system-type 'cygwin))
-           "pc-windows-gnu")
-          ((or (eq system-type 'darwin))
-           "apple-darwin")
-          (t
-           "unknown-linux-gnu"))))
-
-    (concat architecture "-" os)))
-
-(defun company-tabnine--get-exe ()
-  "Return TabNine's binary file name.  Used for finding the correct binary."
-  (cond
-   ((or (eq system-type 'ms-dos)
-        (eq system-type 'windows-nt)
-        (eq system-type 'cygwin))
-    "TabNine.exe")
-   (t
-    "TabNine")))
-
-(defun company-tabnine--version-comp (ver1 ver2)
-  "Compare two TabNine versions (semver) VER1 and VER2."
-  (cond
-   ((null ver1) ; which means (null ver2)
-    t)
-   ((> (car ver1) (car ver2))
-    t)
-   ((= (car ver1) (car ver2))
-    (company-tabnine--version-comp (cdr ver1) (cdr ver2)))))
-
 (defun company-tabnine--executable-path ()
   "Find and return the path of the latest TabNine binary for the current system."
-  (if (file-directory-p company-tabnine-binaries-folder)
-      (let* (children version target file-name)
-
-        ;; get latest version
-        (setq children
-              (cl-remove-if-not
-               (lambda (child)
-                 (file-directory-p (concat (file-name-as-directory
-                                            company-tabnine-binaries-folder)
-                                           child)))
-               (directory-files company-tabnine-binaries-folder)))
-        (setq children
-              (mapcar
-               (lambda (child)
-                 (let ((vers (s-split "\\." child t)))
-                   (if (= (length vers) 3)
-                       (cons (mapcar 'string-to-number vers)
-                             child) ; ((major minor patch) . original-name)
-                     nil)))
-               children))
-        (setq children
-              (cl-remove-if
-               (lambda (child)
-                 (null child))
-               children))
-        (setq children
-              (sort
-               children
-               (lambda (child1 child2)
-                 (company-tabnine--version-comp
-                  (car child1)
-                  (car child2)))))
-        (setq version (cdr (car children)))
-        (when (null version)
-          (company-tabnine--error-no-binaries))
-
-        ;; get target
-        (setq target (company-tabnine--get-target))
-
-        ;; get file name
-        (setq file-name (company-tabnine--get-exe))
-
-        ;; get final executable
-        (let ((executable
-               (expand-file-name
-                (concat version "/"
-                        target "/"
-                        file-name)
-                company-tabnine-binaries-folder)))
-          (if (and (file-exists-p executable)
-                   (file-regular-p executable))
-              executable
-            (company-tabnine--error-no-binaries))))
-
-    (company-tabnine--error-no-binaries)))
+  "@tabnine@")
 
 (defun company-tabnine-start-process ()
   "Start TabNine process."
@@ -454,36 +347,6 @@ See documentation of `company-backends' for details."
     (no-cache t)
     (sorted t)))
 
-(defun company-tabnine-install-binary ()
-  "Install TabNine binary into `company-tabnine-binaries-folder'."
-  (interactive)
-  (let ((version-tempfile company-tabnine--version-tempfile)
-        (target (company-tabnine--get-target))
-        (exe (company-tabnine--get-exe))
-        (binaries-dir company-tabnine-binaries-folder))
-    (message "Getting current version...")
-    (make-directory (file-name-directory version-tempfile) t)
-    (url-copy-file "https://update.tabnine.com/version" version-tempfile t)
-    (let ((version (s-trim (with-temp-buffer (insert-file-contents version-tempfile) (buffer-string)))))
-      (when (= (length version) 0)
-          (error "TabNine installation failed.  Please try again"))
-      (message "Current version is %s" version)
-      (let ((url (concat "https://update.tabnine.com/" version "/" target "/" exe)))
-        (let ((target-path
-               (concat
-                (file-name-as-directory
-                 (concat
-                  (file-name-as-directory
-                   (concat (file-name-as-directory binaries-dir) version))
-                  target))
-                exe)))
-          (message "Installing at %s. Downloading %s ..." target-path url)
-          (make-directory (file-name-directory target-path) t)
-          (url-copy-file url target-path t)
-          (set-file-modes target-path (string-to-number "744" 8))
-          (delete-file version-tempfile)
-          (message "TabNine installation complete."))))))
-
 (defun company-tabnine-call-other-backends ()
   "Invoke company completion but disable TabNine once, passing query to other backends in `company-backends'."
   (interactive)
